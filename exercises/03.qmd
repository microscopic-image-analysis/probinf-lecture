---
jupyter: python3
title: Exercise 3
---

# Problem 1: Sampling from the 3D unit ball

Sample uniformly from the 3D unit ball $\mathbb{B}^3 := \{\mathbf{x} \in \mathbb{R}^3 \quad | \quad \|\mathbf{x}\| \leq 1\}$ in serveral different ways

## a):

Using rejection sampling.

What would be a convenient proposal distribution?
Write a rejection sampler and visualize the samples.

Write down the PDF of the target distribution $p$ (i.e. the uniform distribution over $\mathbb{B}^3$) as well as your proposal distribution $q$ in terms of the (cartesian) coordinates $x, y, z$.

If you interpret the coordinates as random variables, are they independent under $p$? And under $q$?

## b):

### i):

Can we sample directly from the unit ball?
Use spherical coordinates $r \in [0, \infty)$, $\varphi \in [0, 2\pi)$, $\theta \in [0, \pi]$ that are related to the cartesian coordinates $x$, $y$, $z$ via:
$$
\begin{aligned}
    x &= r \sin \theta \cos \varphi \\
    y &= r \sin \theta \sin \varphi \\
    z &= r \cos \theta
\end{aligned}
$$ 

![Spherical and Cartesian Coordinates](images/3D_Spherical.png){width=300}

Sample $r$, $\varphi$, $\theta$ uniformly from the right intervals, so that all points lie within $\mathbb{B}^3$. What do you observe?

### ii):

What distribution do we need to sample $(r, \varphi, \theta)$ from, to obtain uniform samples from $\mathbb{B}^3$?

**Hint:** Express the PDF of $p$ from **a)** in terms of $r, \varphi$ and $\theta$.

If you interpret the *spherical* coordinates as random variables, are they independent under $p$?

## c)

As shown in the lecture, you can sample from the unit $n$-ball by first sampling from the unit $n-1$-sphere (which gives you $n$-dimensional points $x_i$ all with length $\|x_i\| = 1$), and then re-scaling these points with a random length $r$ whose PDF is $f(r) = n r^{n-1}$.

Implement sampling from the $n-1$-sphere. Then use the method to sample from the 3D unit ball.

## d)

Use the method from **c)** to sample 500 points from the $5-1$-sphere.
Project all points down to their first 3 coordinates (resulting in 500 points in 3D).

Make a 3D scatter plot of these points. How are they distributed?

# Problem 2: The Ziggurat algorithm

![Model of the [Chogha Zanbil](https://en.wikipedia.org/wiki/Chogha_Zanbil), an example of a [Ziggurat](https://en.wikipedia.org/wiki/Ziggurat)](images/Chogha_Zanbil_Ziggurat_(model).jpg){width=300}

The [Ziggurat algorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm) is a rejection sampling method to draw random numbers from distributions whose PDF is *monotonically decreasing* (e.g. Exponential distribution, Half-normal distribution, ...). 

## a)

Taking inspiration from the name alone, can you sketch a rejection-sampling method that samples from the [Half-normal distribution](https://en.wikipedia.org/wiki/Half-normal_distribution)?

## b)

Implement the Ziggurat method for the standard Exponential distribution

Bonus: Can you find a way so your method only uses a single 64 bit random integer as input *most of the time*?

::: {.callout-tip}
In newer `numpy` versions (`>= 1.17.0`), the Ziggurat method is the default method for generating normal-, exponential- or gamma-distributed random samples.
Before that, the [Box Muller method](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform) was used, which can still be accessed via the [legacy](https://numpy.org/doc/stable/reference/random/legacy.html#numpy.random.RandomState) `np.random.RandomState` class.
:::